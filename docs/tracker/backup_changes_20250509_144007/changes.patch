diff --git a/tracker/CHANGELOG.md b/tracker/CHANGELOG.md
index 894a5bd..fed1df5 100644
--- a/tracker/CHANGELOG.md
+++ b/tracker/CHANGELOG.md
@@ -7,9 +7,6 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0
 
 ## Table of Contents
 - [Unreleased](#unreleased)
-- [2.0.1](#201) - Refresh animation
-- [2.0.0](#200) - Update option
-- [1.7.2](#172) - Mobile keyboard positioning fix
 - [1.7.1](#171) - Overlay edit fix
 - [1.7.0](#170) - Swipe to delete entries
 - [1.6.0](#160) - Edit total ui
@@ -40,53 +37,12 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0
 
 ## [Unreleased]
 
-## [2.0.1] - 2025-05-09
-
-### Added
-- Added checkmark animation to refresh button when clicked
-- Added "You are on the latest version" success message using color-success variable
-- Implemented smooth transitions for success message appearance and disappearance
-- Enhanced visual feedback when refreshing app from homescreen
-
-### Changed
-- Improved refresh button layout with properly positioned checkmark icon
-- Standardized animation style to match add button's success animation
-- Updated success message styling to use consistent app design patterns
-
-## [2.0.0] - 2025-05-09
-
-### Added
-- Added "Refresh" button in settings menu for web app users
-- Implemented detection for standalone/homescreen app mode
-- Added ability to force refresh the app when installed on iOS homescreen
-- Added update icon to match app's visual style
-
-
-## [1.7.2] - 2025-05-09
-
-### Fixed
-- Fixed mobile overlay positioning when on-screen keyboard appears on smartphones
-- Implemented CSS-first solution using modern viewport units (dvh/svh) for keyboard handling
-- Ensured editing windows remain properly centered when keyboard appears
-- Prevented overlay content from shifting off-screen on iOS Safari and other mobile browsers
-- Maintained consistent width and position during keyboard transitions
-- Added responsive media queries to handle different screen heights during keyboard interaction
-
-### Changed
-- Simplified JavaScript keyboard handling with minimal implementation
-- Added browser capability detection for modern viewport units
-- Maintained backward compatibility with existing API calls from main.js
-- Removed direct style manipulation in JavaScript in favor of CSS-based solutions
-
-## [1.7.1] - 2025-05-09
+## [1.7.1] - 2025-05-08
 
 ### Fixed
 - Fixed issue with text editing overlays disappearing off-screen when the mobile keyboard appears
-- Improved overlay positioning with modern CSS-only solution:
-  - Added support for dynamic viewport height units (dvh/svh) for better mobile keyboard handling
-  - Implemented proper centering of modals in available space above keyboard
-  - Fixed iOS Safari issue where modal would shift too far upward
 - Added specialized keyboard handling for both comment and label editing overlays
+- Implemented position correction to keep input fields visible when keyboard appears
 - Improved scrolling behavior for overlays on mobile devices
 - Eliminated "jumping" effect when the keyboard appears on mobile devices
 - Added smoother transitions and animations for overlay positioning
diff --git a/tracker/index.html b/tracker/index.html
index 9d86b66..80eeed2 100644
--- a/tracker/index.html
+++ b/tracker/index.html
@@ -83,7 +83,7 @@
     <meta name="msapplication-config" content="browserconfig.xml">
 
     <!-- Link to CSS Stylesheets -->
-    <link rel="stylesheet" href="styles/main.css?v=1.7.2">
+    <link rel="stylesheet" href="styles/main.css?v=1.5.0.1">
     <link rel="stylesheet" href="styles/entry-delete.css?v=1.0.0">
 </head>
 
@@ -102,7 +102,7 @@
     </script>
 
     <!-- Version number display -->
-    <div class="version-number">v2.0.1</div>
+    <div class="version-number">v1.7.1</div>
 
     <!-- Main application container -->
     <div class="app">
@@ -122,8 +122,6 @@
         </div>
         <!-- Undo button positioned above the footer -->
         <button class="undo-button hidden" id="undoButton">Undo</button>
-        <!-- Latest version success message -->
-        <div class="version-success-message hidden" id="versionSuccessMessage">You are on the latest version</div>
         <div class="bottom-buttons-wrapper">
             <div class="bottom-buttons">
                 <button class="track-button track-button--footer">
@@ -158,19 +156,6 @@
                     <span id="menuThemeText">Turn off dark mode</span>
                 </button>
 
-                <!-- Refresh app button (only visible when running as web app) -->
-                <button id="refreshAppButton" class="settings-item settings-item-refresh hidden">
-                    <div class="settings-item-icon-container">
-                        <div class="update-icon-container">
-                            <div class="update-icon"></div>
-                            <div class="update-checkmark">
-                                <img src="assets/images/check--fill.svg" alt="Success" class="checkmark-icon">
-                            </div>
-                        </div>
-                    </div>
-                    <span class="refresh-button-text">Refresh</span>
-                </button>
-
                 <!-- Reset button in settings menu -->
                 <button id="resetButton" class="settings-item settings-item-reset">
                     <div class="settings-item-icon-container">
diff --git a/tracker/js/main.js b/tracker/js/main.js
index 5faf6df..d06d8fb 100644
--- a/tracker/js/main.js
+++ b/tracker/js/main.js
@@ -15,7 +15,6 @@ const closeSettingsButton = document.getElementById('closeSettingsButton');
 const menuThemeToggle = document.getElementById('menuThemeToggle'); // Added for menu theme toggle
 const menuThemeIcon = document.getElementById('menuThemeIcon'); // Added for menu theme icon
 const menuThemeText = document.getElementById('menuThemeText'); // Added for menu theme text
-const refreshAppButton = document.getElementById('refreshAppButton'); // Added for app refresh functionality
 
 // Comment functionality elements
 const commentOverlay = document.getElementById('commentOverlay');
@@ -31,9 +30,6 @@ const saveLabelButton = document.getElementById('saveLabelButton');
 const deleteLabelButton = document.getElementById('deleteLabelButton');
 const closeLabelEditButton = document.getElementById('closeLabelEditButton');
 
-// Get the metric card element
-const metricCard = document.querySelector('.metric-card');
-
 // --- Constants and State Variables ---
 const LS_KEYS = {
     COUNT: 'totalCount',
@@ -61,9 +57,6 @@ let resetPending = false; // Flag to track if a reset is waiting for countdown
 let deletedCommentEntry = null;
 let deletedCommentText = '';
 
-// Timer ID for version success message
-let versionSuccessTimerId = null;
-
 // Load state from Local Storage or use defaults with validation
 let totalCount = 0;
 let trackedEntries = [];
@@ -171,131 +164,6 @@ function updateMetricLabel() {
     metricLabel.textContent = metricLabelText;
 }
 
-// --- Helper Functions ---
-
-/**
- * Check if application is running in standalone mode (added to homescreen)
- * @returns {boolean} True if app is running as PWA/standalone
- */
-function isRunningAsWebApp() {
-    // iOS detection
-    const isIOSStandalone = window.navigator.standalone === true;
-
-    // Android/other detection using display-mode
-    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
-
-    // Some browsers support manifest.display property
-    const isPWA = window.matchMedia('(display-mode: fullscreen)').matches ||
-        window.matchMedia('(display-mode: minimal-ui)').matches;
-
-    // For debugging
-    console.log('Web App Detection:', {
-        isIOSStandalone,
-        isStandalone,
-        isPWA,
-        userAgent: navigator.userAgent
-    });
-
-    return isIOSStandalone || isStandalone || isPWA;
-}
-
-/**
- * Initialize refresh app button functionality
- */
-function initRefreshAppButton() {
-    // Make sure the button exists
-    if (!refreshAppButton) {
-        console.error('Refresh app button not found in the DOM');
-        return;
-    }
-
-    // Force hide the button initially
-    refreshAppButton.classList.add('hidden');
-    refreshAppButton.style.display = 'none';
-
-    // Get version success message element
-    const versionSuccessMessage = document.getElementById('versionSuccessMessage');
-
-    // Only show the button when running as a web app
-    const isWebApp = isRunningAsWebApp();
-    console.log('Is running as web app:', isWebApp);
-
-    if (isWebApp) {
-        // Show the button with a slight delay to ensure CSS is applied
-        setTimeout(() => {
-            refreshAppButton.classList.remove('hidden');
-            refreshAppButton.style.display = '';
-            console.log('Refresh app button shown');
-        }, 500);        // Add click handler
-        refreshAppButton.addEventListener('click', () => {
-            console.log('Refreshing app...');
-
-            // Show success animation
-            showRefreshSuccess();
-
-            // Force reload from server, not cache after animation completes
-            setTimeout(() => {
-                // Reset the visibility just before reload to avoid any weird state on page refresh
-                const updateIcon = refreshAppButton.querySelector('.update-icon');
-                if (updateIcon) {
-                    updateIcon.style.visibility = '';
-                }
-                window.location.reload(true);
-            }, 1000);
-        });
-    }
-}
-
-// Function to show the refresh success checkmark animation and message
-function showRefreshSuccess() {
-    // Animate the refresh button
-    refreshAppButton.classList.add('success');
-
-    // Get version success message element
-    const versionSuccessMessage = document.getElementById('versionSuccessMessage');
-
-    // Make sure update icon stays hidden during animation
-    const updateIcon = refreshAppButton.querySelector('.update-icon');
-    if (updateIcon) {
-        updateIcon.style.visibility = 'hidden';
-    }
-
-    // Show the success message
-    if (versionSuccessMessage) {
-        // Clear any existing timers
-        if (versionSuccessTimerId) {
-            clearTimeout(versionSuccessTimerId);
-        }
-
-        // Remove hidden class and add show class
-        versionSuccessMessage.classList.remove('hidden');
-
-        // Force browser to recognize the initial state before animating
-        void versionSuccessMessage.offsetHeight;
-
-        // Show the message with animation
-        versionSuccessMessage.classList.add('show');
-
-        // Set a timer to hide the message after 3 seconds
-        versionSuccessTimerId = setTimeout(() => {
-            hideVersionSuccessMessage();
-        }, 3000);
-    }
-}
-
-// Function to hide the version success message
-function hideVersionSuccessMessage() {
-    const versionSuccessMessage = document.getElementById('versionSuccessMessage');
-    if (versionSuccessMessage) {
-        versionSuccessMessage.classList.remove('show');
-
-        // Add hidden class after animation completes
-        setTimeout(() => {
-            versionSuccessMessage.classList.add('hidden');
-        }, 300);
-    }
-}
-
 // --- Comment Functionality ---
 
 // Helper function to detect mobile devices
@@ -427,15 +295,10 @@ commentTextarea.addEventListener('input', updateDeleteButtonState);
 
 // Hide comment overlay
 function hideCommentOverlay() {
-    // Add class first
     commentOverlay.classList.add('hidden');
     currentEditingEntry = null;
     commentTextarea.value = '';
-
-    // Use a small delay before restoring scroll to ensure DOM updates complete first
-    setTimeout(() => {
-        restorePageScroll();
-    }, 10);
+    restorePageScroll();
 }
 
 // Delete/cancel comment 
@@ -674,11 +537,7 @@ function showLabelEditOverlay() {
 function hideLabelEditOverlay() {
     labelEditOverlay.classList.add('hidden');
     labelEditInput.value = '';
-
-    // Use a small delay before restoring scroll to ensure DOM updates complete first
-    setTimeout(() => {
-        restorePageScroll();
-    }, 10);
+    restorePageScroll();
 }
 
 // Save the edited label
@@ -752,16 +611,6 @@ const mainContent = document.getElementById('mainContent');
 // Add scroll handler for footer shadow
 const bottomButtonsWrapper = document.querySelector('.bottom-buttons-wrapper');
 
-// Function to update shadow on the metric card when scrolling
-function updateMetricCardShadow() {
-    // Add shadow when scrolled down (even just a little)
-    if (mainContent.scrollTop > 10) {
-        metricCard.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.1)';
-    } else {
-        metricCard.style.boxShadow = 'none';
-    }
-}
-
 // Update shadow based on scroll position
 function updateFooterShadow() {
     if (mainContent.scrollHeight > mainContent.clientHeight &&
@@ -772,12 +621,6 @@ function updateFooterShadow() {
     }
 }
 
-// Combined function to update both shadows on scroll
-function updateShadowsOnScroll() {
-    updateFooterShadow();
-    updateMetricCardShadow();
-}
-
 // Function to update opacity based on viewport visibility
 function updateVisibleEntryOpacities() {
     requestAnimationFrame(() => {
@@ -872,13 +715,10 @@ function rafThrottle(callback) {
 
 // Replace current throttle with RAF-based throttle
 const throttledUpdateOpacities = rafThrottle(updateVisibleEntryOpacities);
-const throttledUpdateShadows = rafThrottle(updateShadowsOnScroll);
 
-// Listen for scroll events using the throttled functions
+// Listen for scroll events using the throttled function
 mainContent.addEventListener('scroll', throttledUpdateOpacities);
-mainContent.addEventListener('scroll', throttledUpdateShadows);
 window.addEventListener('resize', throttledUpdateOpacities);
-window.addEventListener('resize', throttledUpdateShadows);
 
 // --- Grouping and Rendering Entries ---
 
@@ -1133,31 +973,12 @@ function toggleTestingMode() {
 
 // Add keyboard shortcut for testing mode (Ctrl/Cmd + Shift + T)
 document.addEventListener('keydown', (e) => {
-    // Testing mode toggle with Ctrl/Cmd + Shift + T
     if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'T') {
-        toggleTestingMode(e);
-    }
-
-    // Debug mode for refresh button with Ctrl/Cmd + Shift + R
-    if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'R') {
-        e.preventDefault();
-        // Toggle refresh button visibility for testing
-        if (refreshAppButton) {
-            if (refreshAppButton.classList.contains('hidden')) {
-                refreshAppButton.classList.remove('hidden');
-                refreshAppButton.style.display = '';
-                console.log('Refresh button shown for testing');
-            } else {
-                refreshAppButton.classList.add('hidden');
-                refreshAppButton.style.display = 'none';
-                console.log('Refresh button hidden');
-            }
-        }
+        const enabled = toggleTestingMode();
+        console.log(`Testing mode ${enabled ? 'enabled' : 'disabled'}`);
     }
 });
 
-// --- Data Management ---
-
 // Function to add a new timestamp entry
 function addTimestamp() {
     const now = new Date();
@@ -1263,10 +1084,7 @@ settingsButton.addEventListener('click', () => {
 // Close Settings Overlay (using the close button)
 closeSettingsButton.addEventListener('click', () => {
     settingsOverlay.classList.add('hidden');
-    // Small delay before restoring scroll position
-    setTimeout(() => {
-        restorePageScroll();
-    }, 10);
+    restorePageScroll();
 });
 
 // Close Settings Overlay (clicking outside the content)
@@ -1274,10 +1092,7 @@ settingsOverlay.addEventListener('click', (event) => {
     // Check if the click is directly on the overlay background
     if (event.target === settingsOverlay) {
         settingsOverlay.classList.add('hidden');
-        // Small delay before restoring scroll position
-        setTimeout(() => {
-            restorePageScroll();
-        }, 10);
+        restorePageScroll();
     }
 });
 
@@ -1288,10 +1103,7 @@ menuThemeToggle.addEventListener('click', () => {
     applyTheme(currentTheme === 'dark' ? 'light' : 'dark');
     // Close the menu immediately
     settingsOverlay.classList.add('hidden');
-    // Small delay before restoring scroll position
-    setTimeout(() => {
-        restorePageScroll();
-    }, 10);
+    restorePageScroll();
 });
 
 // --- Add click handler for the reset button
@@ -1314,10 +1126,7 @@ resetButton.addEventListener('click', () => {
 
     // Auto-close the menu after starting the reset process
     settingsOverlay.classList.add('hidden');
-    // Small delay before restoring scroll position
-    setTimeout(() => {
-        restorePageScroll();
-    }, 10);
+    restorePageScroll();
 });
 
 // --- Backup and Restore Functions ---
@@ -1631,9 +1440,6 @@ document.addEventListener('DOMContentLoaded', () => {
         }, 100);
     }
 
-    // Initialize refresh app functionality
-    initRefreshAppButton();
-
     // The rest of your DOMContentLoaded code continues...
     // Fix settings menu icon colors with a direct approach
     // Create a style element to inject our custom CSS
@@ -1687,22 +1493,11 @@ window.recalculateEntryOpacities = function () {
 };
 
 // Function to prevent and restore page scroll
-let savedWindowScrollPosition = 0;
-let savedMainContentScrollPosition = 0;
+let savedScrollPosition = 0;
 
 function preventPageScroll() {
-    // Store current window scroll position
-    savedWindowScrollPosition = window.scrollY || document.documentElement.scrollTop;
-
-    // Store current mainContent scroll position - make sure we get the current value
-    if (mainContent) {
-        savedMainContentScrollPosition = mainContent.scrollTop;
-        // Save to a data attribute on the element as well as a backup
-        mainContent.setAttribute('data-saved-scroll', savedMainContentScrollPosition);
-        console.log('Saving scroll position:', savedMainContentScrollPosition);
-    } else {
-        savedMainContentScrollPosition = 0;
-    }
+    // Store current scroll position
+    savedScrollPosition = window.scrollY || document.documentElement.scrollTop;
 
     // Add a class to prevent scrolling on the body
     document.body.classList.add('overlay-open');
@@ -1712,7 +1507,7 @@ function preventPageScroll() {
         // Apply fixed positioning to prevent scrolling while maintaining visual position
         document.body.style.position = 'fixed';
         document.body.style.width = '100%';
-        document.body.style.top = `-${savedWindowScrollPosition}px`;
+        document.body.style.top = `-${savedScrollPosition}px`;
     } else {
         // For mobile, use overflow hidden which is smoother with keyboards
         document.body.style.overflow = 'hidden';
@@ -1728,42 +1523,10 @@ function restorePageScroll() {
         document.body.style.position = '';
         document.body.style.width = '';
         document.body.style.top = '';
-        // Restore the window scroll position
-        window.scrollTo(0, savedWindowScrollPosition);
+        // Restore the scroll position
+        window.scrollTo(0, savedScrollPosition);
     } else {
         // For mobile, just remove the overflow restriction
         document.body.style.overflow = '';
-        // Also restore window scroll position on mobile devices
-        window.scrollTo(0, savedWindowScrollPosition);
-    }
-
-    // Restore mainContent scroll position for both mobile and desktop
-    if (mainContent) {
-        // Try to get the position from both the variable and data attribute as backup
-        const savedPosition = savedMainContentScrollPosition ||
-            parseInt(mainContent.getAttribute('data-saved-scroll')) || 0;
-
-        console.log('Restoring scroll position:', savedPosition);
-
-        // Try multiple times to ensure the scroll position is applied correctly
-        // This helps with timing issues in different browsers and devices
-        const applyScroll = () => {
-            mainContent.scrollTop = savedPosition;
-        };
-
-        // Apply immediately
-        applyScroll();
-
-        // And also with small delays to catch any timing issues
-        setTimeout(applyScroll, 10);
-        setTimeout(applyScroll, 50);
-
-        // Clear the data attribute after restoring
-        setTimeout(() => {
-            mainContent.removeAttribute('data-saved-scroll');
-        }, 100);
     }
-}
-
-// Initialize refresh app button functionality
-initRefreshAppButton();
\ No newline at end of file
+}
\ No newline at end of file
diff --git a/tracker/styles/main.css b/tracker/styles/main.css
index 73016ab..8c8879b 100644
--- a/tracker/styles/main.css
+++ b/tracker/styles/main.css
@@ -27,8 +27,6 @@
     /* light background */
     --color-surface: rgb(255, 255, 255);
     /* white surface */
-    --color-sucess: rgb(0, 181, 106);
-    /* success green */
     --color-error: rgb(181, 0, 90);
     /* error pink */
     --color-error-inactive: rgb(181, 181, 181);
@@ -99,12 +97,6 @@
     body {
         /* Add padding for the status bar */
         padding-top: env(safe-area-inset-top, 0);
-        /* Additional iOS fixes */
-        height: 100vh;
-        width: 100vw;
-        overflow: hidden;
-        position: fixed;
-        -webkit-overflow-scrolling: touch;
     }
 
     /* Adjust version number position for iOS */
@@ -115,65 +107,6 @@
     /* Adjust app container for iOS */
     .app {
         padding-top: max(4vw, env(safe-area-inset-top, 0));
-        height: 100vh;
-        /* Force full height on iOS */
-        overflow: hidden;
-    }
-}
-
-/* --- iOS Specific Adjustments --- */
-@supports (-webkit-touch-callout: none) {
-
-    /* Bottom buttons wrapper adjustments for iOS safe areas */
-    .bottom-buttons-wrapper {
-        bottom: env(safe-area-inset-bottom, 0);
-        padding-bottom: calc(1.25rem + env(safe-area-inset-bottom, 0));
-        transform: translateZ(0);
-        /* Promote to its own layer for better rendering */
-    }
-
-    @media screen and (min-height: 800px) {
-
-        /* For taller iOS devices */
-        #mainContent {
-            max-height: calc(100vh - 200px - env(safe-area-inset-bottom, 0));
-        }
-
-        .metric-card {
-            margin-top: max(2.5rem, env(safe-area-inset-top, 0));
-        }
-    }
-
-    /* Fix for landscape mode on iOS */
-    @media screen and (orientation: landscape) {
-        .bottom-buttons-wrapper {
-            padding-bottom: calc(0.75rem + env(safe-area-inset-bottom, 0));
-        }
-
-        #mainContent {
-            max-height: calc(100vh - 160px - env(safe-area-inset-bottom, 0));
-            padding-bottom: calc(5rem + env(safe-area-inset-bottom, 0));
-        }
-
-        .metric-card {
-            margin-top: 1.5rem;
-            padding: 1.5rem 1.5rem 1.2rem 1.5rem;
-        }
-    }
-}
-
-/* iOS adjustments for undo button */
-@supports (-webkit-touch-callout: none) {
-    .undo-button {
-        bottom: calc(120px + env(safe-area-inset-bottom, 0) * 0.5);
-    }
-
-    .undo-button.show {
-        bottom: calc(120px + env(safe-area-inset-bottom, 0) * 0.5);
-    }
-
-    .undo-button.hidden {
-        bottom: calc(90px + env(safe-area-inset-bottom, 0) * 0.5);
     }
 }
 
@@ -195,9 +128,6 @@
 html,
 body {
     height: 100%;
-    overflow: hidden;
-    position: fixed;
-    width: 100%;
     margin: 0;
     padding: 0;
     background: var(--color-background);
@@ -259,8 +189,6 @@ body {
     position: relative;
     min-height: unset;
     background: transparent;
-    overflow: hidden;
-    /* Prevent scrolling of the app container */
 }
 
 /* --- Metric Card (Total Count) --- */
@@ -277,20 +205,6 @@ body {
     max-width: 80%;
     margin-top: 2.5rem;
     margin-bottom: 1.5rem;
-    position: sticky;
-    top: 0;
-    z-index: 10;
-    transition: box-shadow 0.3s ease;
-}
-
-/* Dark mode shadow for metric card when scrolled */
-body.dark-mode .metric-card {
-    transition: box-shadow 0.3s ease;
-}
-
-body.dark-mode .metric-card[style*="box-shadow"] {
-    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5) !important;
-    /* Stronger shadow for dark mode */
 }
 
 /* Container for label and edit button */
@@ -434,6 +348,7 @@ body.dark-mode .label-edit-input:focus {
     justify-content: space-between;
     margin-top: 1rem;
     margin-bottom: 0.5rem;
+    gap: 0.75rem;
 }
 
 /* --- Metric Value --- */
@@ -554,98 +469,13 @@ body.dark-mode .label-edit-input:focus {
     filter: brightness(0) invert(1);
 }
 
-/* --- Update Button Animation Styles --- */
-.update-icon-container {
-    position: relative;
-    width: 24px;
-    height: 24px;
-}
-
-.update-icon {
-    width: 24px;
-    height: 24px;
-    mask-image: url('../assets/images/update--fill.svg');
-    -webkit-mask-image: url('../assets/images/update--fill.svg');
-    mask-size: contain;
-    -webkit-mask-size: contain;
-    mask-repeat: no-repeat;
-    -webkit-mask-repeat: no-repeat;
-    background-color: var(--color-primary);
-    transition: opacity 0.3s, transform 0.3s;
-}
-
-.update-checkmark {
-    position: absolute;
-    top: 0;
-    left: 0;
-    width: 24px;
-    height: 24px;
-    opacity: 0;
-    transform: scale(0.5) rotate(-180deg);
-}
-
-.settings-item-refresh.success .update-icon {
-    opacity: 0;
-    transform: scale(0.5);
-    visibility: hidden;
-    /* Completely hide the refresh icon during animation */
-    transition: opacity 0.2s ease-out, transform 0.2s ease-out, visibility 0.2s ease-out;
-}
-
-.settings-item-refresh.success .update-checkmark {
-    opacity: 1;
-    transform: scale(1) rotate(0deg);
-    animation: rollInCheckmark 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55) forwards;
-    visibility: visible;
-    /* Ensure checkmark is visible during animation */
-}
-
-.checkmark-icon {
-    width: 100%;
-    height: 100%;
-}
-
-/* --- Version Success Message Styles --- */
-.version-success-message {
-    position: fixed;
-    bottom: 120px;
-    left: 50%;
-    transform: translateX(-50%);
-    background-color: var(--color-success);
-    color: var(--color-on-success);
-    border: none;
-    border-radius: 6px;
-    padding: 0.7rem 1.5rem;
-    font-weight: 600;
-    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
-    transition: transform 0.2s, opacity 0.3s, bottom 0.3s;
-    z-index: 99;
-    opacity: 0;
-    pointer-events: none;
-    bottom: 110px;
-}
-
-.version-success-message.show {
-    opacity: 1;
-    pointer-events: auto;
-    bottom: 120px;
-}
-
-.version-success-message.hidden {
-    opacity: 0;
-    pointer-events: none;
-    bottom: 90px;
-    visibility: hidden;
-}
-
 /* --- Main Content Area (Timestamp List) --- */
 #mainContent {
     flex: 1 1 auto;
     overflow-y: auto;
-    overflow-x: hidden;
     min-height: 200px;
-    max-height: calc(100vh - 200px);
-    /* Adjusted to account for metric card and footer */
+    max-height: 100vh;
+    /* Prevent collapse */
     max-width: 400px;
     width: 100%;
     margin: 0 auto;
@@ -656,10 +486,6 @@ body.dark-mode .label-edit-input:focus {
     padding-bottom: 7rem;
     /* Ensure content is not overlapped by footer */
     background: transparent;
-    position: relative;
-    /* Important for proper iOS scrolling behavior */
-    -webkit-overflow-scrolling: touch;
-    /* Smooth scrolling on iOS */
 
     /* Standard scrollbar properties (Firefox) */
     scrollbar-width: thin;
@@ -1169,41 +995,6 @@ body.dark-mode .bottom-buttons-wrapper.shadow {
     -webkit-mask-position: center;
 }
 
-/* Update Icon */
-.update-icon {
-    width: 24px;
-    height: 24px;
-    background-color: var(--color-primary);
-    mask-image: url('../assets/images/update--fill.svg');
-    mask-size: contain;
-    mask-repeat: no-repeat;
-    mask-position: center;
-    -webkit-mask-image: url('../assets/images/update--fill.svg');
-    -webkit-mask-size: contain;
-    -webkit-mask-repeat: no-repeat;
-    -webkit-mask-position: center;
-    opacity: 0.75;
-    transition: opacity 0.2s;
-}
-
-/* Refresh app button styling */
-.settings-item-refresh {
-    color: var(--color-primary);
-}
-
-.settings-item-refresh .update-icon {
-    background-color: var(--color-primary);
-    opacity: 0.75;
-}
-
-.settings-item-refresh:hover {
-    background-color: var(--color-primary-25);
-}
-
-.settings-item-refresh:hover .update-icon {
-    opacity: 1;
-}
-
 /* Reset Icon - More specific selector with !important to override any conflicts */
 #resetButton .reset-icon {
     width: 24px;
@@ -1799,31 +1590,4 @@ body.dark-mode .undo-button:hover {
 /* Dark mode adjustments */
 body.dark-mode .undo-button {
     box-shadow: 0 2px 8px rgba(0, 0, 0, 0.4);
-}
-
-/* Apply dark mode to critical elements to prevent flash */
-html.dark-mode .metric-card {
-    background-color: rgb(30, 30, 30) !important;
-    color: rgb(255, 255, 255) !important;
-}
-
-html.dark-mode .metric-value {
-    color: rgb(149, 117, 205) !important;
-}
-
-html.dark-mode .version-number {
-    color: rgb(255, 255, 255) !important;
-}
-
-/* General utility classes */
-.hidden {
-    display: none !important;
-    visibility: hidden !important;
-    opacity: 0 !important;
-    pointer-events: none !important;
-}
-
-/* Hide body content until CSS is fully loaded to prevent FOUC */
-.js-loading body {
-    visibility: hidden;
 }
\ No newline at end of file
