class u extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this._id=this.getAttribute("data-id")||`item-${Math.random().toString(36).slice(2,9)}`,this._value=this.getAttribute("value")||this.textContent||"",this._timestamp=this.getAttribute("timestamp")||null,this._date=this.getAttribute("date")||null,this._checked=this.hasAttribute("checked"),this.render()}connectedCallback(){this.render()}static get observedAttributes(){return["value","checked","archived","restored","timestamp","date"]}attributeChangedCallback(t,a,s){t==="value"&&(this._value=s),t==="timestamp"&&(this._timestamp=s),t==="date"&&(this._date=s),t==="checked"&&(this._checked=this.hasAttribute("checked")),this.render()}render(){if(!this.shadowRoot.innerHTML){this.shadowRoot.innerHTML=`
        <style>
          :host { display: block; width: 100%; font-family: var(--font-family-base, system-ui, sans-serif); }
          .row { display:flex; align-items:center; gap:12px; padding:10px 12px; border-radius:12px; background:var(--color-surface, #fff); width:100%; box-sizing:border-box; min-width:0; }
          .text { flex:1; font-size:1rem; color:var(--color-on-surface, #111); word-break:break-word; }
          .timestamp { font-size:0.75rem; color:var(--color-on-surface-variant, #666); margin-left:6px; }
          .badge { font-size:0.625rem; padding:4px 8px; border-radius:999px; background:var(--color-surface-secondary, #f1f3f4); color:var(--color-on-surface); margin-left:8px; }
          .actions { display:flex; gap:8px; align-items:center; }
          labs-button[variant="icon"] { --icon-size:20px; }
          .secondary-variant { background: var(--color-surface-secondary, #f6f7f8); }
        </style>
        <div class="row" role="listitem" data-id="${this._id}">
          <labs-checkbox id="chk" aria-label="Toggle complete"></labs-checkbox>
          <div style="display:flex;flex-direction:column;flex:1;">
            <div class="text"></div>
            <div class="timestamp" aria-hidden="true"></div>
          </div>
          <div id="archivedBadgeContainer" aria-hidden="true"></div>
          <div class="actions">
            <labs-button id="archiveBtn" variant="icon" aria-label="Archive">
              <labs-icon id="archiveIcon" slot="icon-left" name="archive" width="20" height="20"></labs-icon>
            </labs-button>
            <labs-button id="deleteBtn" variant="icon" aria-label="Delete">
              <labs-icon slot="icon-left" name="delete_forever" width="20" height="20"></labs-icon>
            </labs-button>
          </div>
        </div>
      `;const c=this.shadowRoot.getElementById("chk");c&&c.addEventListener("change",h=>{this._checked=!!h.detail&&!!h.detail.checked,this._checked?this.setAttribute("checked",""):this.removeAttribute("checked"),this.dispatchEvent(new CustomEvent("toggle",{detail:{checked:this._checked,id:this._id},bubbles:!0,composed:!0}))});const d=this.shadowRoot.getElementById("archiveBtn");d&&d.addEventListener("click",()=>{this.hasAttribute("archived")&&!this.hasAttribute("restored")?(this.setAttribute("restored",""),this.dispatchEvent(new CustomEvent("request-restore-copy",{detail:{value:this._value,id:this._id},bubbles:!0,composed:!0}))):this.hasAttribute("archived")||this._archive()});const n=this.shadowRoot.getElementById("deleteBtn");n&&n.addEventListener("click",()=>{this.hasAttribute("archived")&&this._remove()})}const t=this.shadowRoot.getElementById("chk");if(t){this._checked?t.setAttribute("checked",""):t.removeAttribute("checked");const c=(()=>{if(!this._date)return!1;try{const d=new Date(this._date+"T00:00:00"),h=new Date().toISOString().slice(0,10);return d.toISOString().slice(0,10)!==h}catch{return!1}})();this.hasAttribute("archived")||c?t.setAttribute("inactive",""):t.removeAttribute("inactive")}const a=this.shadowRoot.querySelector(".text");a&&(a.textContent=this._value);const s=this.shadowRoot.querySelector(".timestamp");s&&(s.textContent=this._timestamp?this._formatTimestamp(this._timestamp):"");const i=this.shadowRoot.getElementById("archiveIcon"),e=this.shadowRoot.getElementById("archiveBtn"),r=this.shadowRoot.querySelector(".row");if(this.hasAttribute("restored"))i&&(i.setAttribute("name","history"),i.setAttribute("color","var(--color-on-surface)"),i.style.opacity="0.45"),e&&(e.setAttribute("aria-label","Already restored"),e.setAttribute("disabled",""),e.style.pointerEvents="none"),r&&(r.style.opacity="var(--labs-archived-opacity, 0.7)");else if(this.hasAttribute("archived")){if(i&&(i.setAttribute("name","history"),i.setAttribute("color","var(--color-on-surface)"),i.style.opacity=""),e){e.setAttribute("aria-label","Restore"),e.style.pointerEvents="",e.removeAttribute("disabled");try{e.innerHTML='<labs-icon slot="icon-left" name="history" width="20" height="20"></labs-icon> Restore',e.setAttribute("variant","secondary"),e.setAttribute("size","small")}catch{}}r&&(r.style.opacity="")}else{if(i&&(i.setAttribute("name","archive"),i.setAttribute("color","var(--color-on-surface)"),i.style.opacity=""),e){e.setAttribute("aria-label","Archive"),e.removeAttribute("disabled"),e.style.pointerEvents="";try{e.innerHTML='<labs-icon id="archiveIcon" slot="icon-left" name="archive" width="20" height="20"></labs-icon> Archive',e.setAttribute("variant","secondary"),e.setAttribute("size","small")}catch{}}r&&(r.style.opacity="",r.classList.remove("secondary-variant"))}const l=this.shadowRoot.getElementById("archivedBadgeContainer");l&&(l.innerHTML="");const o=this.shadowRoot.getElementById("deleteBtn");o&&(this.hasAttribute("archived")?(o.style.display="",o.removeAttribute("aria-hidden"),o.removeAttribute("disabled")):(o.style.display="none",o.setAttribute("aria-hidden","true"),o.setAttribute("disabled","")))}_formatTimestamp(t){try{const a=new Date(t),s=a.getHours().toString().padStart(2,"0"),i=a.getMinutes().toString().padStart(2,"0");return`${s}:${i}`}catch{return t}}_toggle(){this._checked=!this._checked,this._checked?this.setAttribute("checked",""):this.removeAttribute("checked");const t=this.shadowRoot&&this.shadowRoot.getElementById&&this.shadowRoot.getElementById("chk");t&&t.setAttribute("aria-checked",String(this._checked)),this.dispatchEvent(new CustomEvent("toggle",{detail:{checked:this._checked,id:this._id},bubbles:!0,composed:!0})),this.render()}_archive(){this.setAttribute("archived",""),this.dispatchEvent(new CustomEvent("archive",{detail:{value:this._value,id:this._id},bubbles:!0,composed:!0}))}_restore(){this.hasAttribute("restored")||(this.removeAttribute("archived"),this.setAttribute("restored",""),this.dispatchEvent(new CustomEvent("restore",{detail:{value:this._value,id:this._id},bubbles:!0,composed:!0})))}_remove(){this.dispatchEvent(new CustomEvent("remove",{detail:{value:this._value,id:this._id},bubbles:!0,composed:!0}))}get value(){return this._value}set value(t){this._value=t,this.setAttribute("value",t)}}customElements.get("labs-list-item")||customElements.define("labs-list-item",u);
