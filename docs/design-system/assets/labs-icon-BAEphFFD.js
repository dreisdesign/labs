const e = "../icons/", l = { add_comment: e + "add_comment--labs-icons.svg", bedtime: e + "bedtime--labs-icons.svg", bedtime_off: e + "bedtime_off--labs-icons.svg", cancel: e + "cancel--labs-icons.svg", change_circle: e + "change_circle--labs-icons.svg", check--labs-icons.svg: e + "check--fill.svg", check: e + "check--labs-icons.svg", close: e + "close--labs-icons.svg", comment: e + "comment--labs-icons.svg", delete_forever: e + "delete_forever--labs-icons.svg", edit: e + "edit--labs-icons.svg", rate_review: e + "rate_review--labs-icons.svg", settings_fill: e + "settings--fill.svg", settings: e + "settings--labs-icons.svg", undo: e + "undo--labs-icons.svg", undo_svg: e + "undo.svg"}; class o extends HTMLElement { static get observedAttributes() { return ["name"] } attributeChangedCallback(s, t, i) { this.render() } connectedCallback() { this.render() } render() { const s = this.getAttribute("name"); let t = l[s]; if (t) { const i = window.getComputedStyle(this), n = this.getAttribute("width") || i.width || "24px", c = this.getAttribute("height") || i.height || "24px"; this.innerHTML = `<img src="${t}" width="${parseInt(n)}" height="${parseInt(c)}" style="display:inline-block;vertical-align:middle;" alt="${s}" />` } else this.innerHTML = "" } } customElements.define("labs-icon", o);
