import"./labs-button-DEUKwH7W.js";import"./labs-icon-BgHZyyah.js";import"./labs-checkbox-GPeXQARi.js";import{b as p}from"./button-configs-CUB_r__D.js";const m={title:"Components/Button",tags:["autodocs"],parameters:{docs:{description:{component:"The comprehensive button component of the Labs Design System. Supports all variants, icons, theme toggles, and interactive states. Use the controls below to explore all possibilities or the 'Show code' feature to get copy-ready HTML."}}},argTypes:{label:{control:"text",description:"Button text content",table:{category:"Content"}},variant:{control:{type:"select"},options:["primary","secondary","danger","transparent","container","container-danger","icon"],description:"Button visual style and behavior",table:{category:"Appearance"}},icon:{control:{type:"select"},options:["","add","add_comment","apps","bedtime","bedtime_off","build","cancel","change_circle","check","close","comment","content_copy","delete_forever","edit","open_in_new","rate_review","settings","undo","refresh"],description:"Icon name (left side by default)",table:{category:"Icons"}},iconRight:{control:{type:"select"},options:["","add","add_comment","apps","bedtime","bedtime_off","build","cancel","change_circle","check","close","comment","content_copy","delete_forever","edit","open_in_new","rate_review","settings","undo","refresh"],description:"Icon on the right side",table:{category:"Icons"}},iconcolor:{control:"color",description:"Icon color (CSS value)",table:{category:"Icons"}},checkmark:{control:"boolean",description:"Enable checkmark animation on click",table:{category:"Interaction"}},preset:{control:{type:"select"},options:["","add","save","edit","undo","delete","resetAllData","themeToggle","close","settings","allApps","refresh"],description:"Load a pre-configured button setup",table:{category:"Presets"}}}},l=t=>{if(t.preset&&p[t.preset]){const n=p[t.preset],a=[];return n.label&&a.push(`label="${n.label}"`),n.variant&&n.variant!=="primary"&&a.push(`variant="${n.variant}"`),n.icon&&a.push(`icon="${n.icon}"`),n.iconRight&&a.push(`icon-right="${n.iconRight}"`),n.checkmark&&a.push(`checkmark="${n.checkmark}"`),n.iconcolor&&a.push(`iconcolor="${n.iconcolor}"`),`<labs-button ${a.join(" ")}></labs-button>`}const r=[];return t.label&&r.push(`label="${t.label}"`),t.variant&&t.variant!=="primary"&&r.push(`variant="${t.variant}"`),t.icon&&r.push(`icon="${t.icon}"`),t.iconRight&&r.push(`icon-right="${t.iconRight}"`),t.checkmark&&r.push(`checkmark="${t.checkmark}"`),t.iconcolor&&r.push(`iconcolor="${t.iconcolor}"`),`<labs-button ${r.join(" ")}></labs-button>`},o=l.bind({});o.args={label:"Button",variant:"primary"};o.parameters={docs:{description:{story:"The default primary button. Use the controls to explore all variants and configurations."}}};const i=l.bind({});i.args={label:"Try all variants",variant:"primary"};i.parameters={docs:{description:{story:"Use the variant control to see all button styles: primary, secondary, danger, transparent, container, container-danger, and icon."}}};const s=l.bind({});s.args={label:"Save",icon:"check",variant:"primary",checkmark:!0};s.parameters={docs:{description:{story:"Buttons with icons support checkmark animations and color customization."}}};const c=l.bind({});c.args={icon:"settings",variant:"icon"};c.parameters={docs:{description:{story:"Icon-only buttons for persistent UI elements. Use variant='icon' for circular style."}}};const e=l.bind({});e.args={preset:"themeToggle"};e.parameters={docs:{description:{story:"Pre-configured theme toggle button. Try other presets like 'add', 'save', 'delete', etc."}}};const g=l.bind({});g.args={preset:"delete"};g.parameters={docs:{description:{story:"Destructive actions with danger styling. Also try 'resetAllData' preset."}}};o.parameters={...o.parameters,docs:{...o.parameters?.docs,source:{originalSource:'args => {\n  // If preset is selected, use that configuration\n  if (args.preset && buttonConfigs[args.preset]) {\n    const config = buttonConfigs[args.preset];\n    const attrs = [];\n    if (config.label) attrs.push(`label="${config.label}"`);\n    if (config.variant && config.variant !== \'primary\') attrs.push(`variant="${config.variant}"`);\n    if (config.icon) attrs.push(`icon="${config.icon}"`);\n    if (config.iconRight) attrs.push(`icon-right="${config.iconRight}"`);\n    if (config.checkmark) attrs.push(`checkmark="${config.checkmark}"`);\n    if (config.iconcolor) attrs.push(`iconcolor="${config.iconcolor}"`);\n    return `<labs-button ${attrs.join(\' \')}></labs-button>`;\n  }\n\n  // Otherwise use manual args\n  const attrs = [];\n  if (args.label) attrs.push(`label="${args.label}"`);\n  if (args.variant && args.variant !== \'primary\') attrs.push(`variant="${args.variant}"`);\n  if (args.icon) attrs.push(`icon="${args.icon}"`);\n  if (args.iconRight) attrs.push(`icon-right="${args.iconRight}"`);\n  if (args.checkmark) attrs.push(`checkmark="${args.checkmark}"`);\n  if (args.iconcolor) attrs.push(`iconcolor="${args.iconcolor}"`);\n  return `<labs-button ${attrs.join(\' \')}></labs-button>`;\n}',...o.parameters?.docs?.source}}};i.parameters={...i.parameters,docs:{...i.parameters?.docs,source:{originalSource:'args => {\n  // If preset is selected, use that configuration\n  if (args.preset && buttonConfigs[args.preset]) {\n    const config = buttonConfigs[args.preset];\n    const attrs = [];\n    if (config.label) attrs.push(`label="${config.label}"`);\n    if (config.variant && config.variant !== \'primary\') attrs.push(`variant="${config.variant}"`);\n    if (config.icon) attrs.push(`icon="${config.icon}"`);\n    if (config.iconRight) attrs.push(`icon-right="${config.iconRight}"`);\n    if (config.checkmark) attrs.push(`checkmark="${config.checkmark}"`);\n    if (config.iconcolor) attrs.push(`iconcolor="${config.iconcolor}"`);\n    return `<labs-button ${attrs.join(\' \')}></labs-button>`;\n  }\n\n  // Otherwise use manual args\n  const attrs = [];\n  if (args.label) attrs.push(`label="${args.label}"`);\n  if (args.variant && args.variant !== \'primary\') attrs.push(`variant="${args.variant}"`);\n  if (args.icon) attrs.push(`icon="${args.icon}"`);\n  if (args.iconRight) attrs.push(`icon-right="${args.iconRight}"`);\n  if (args.checkmark) attrs.push(`checkmark="${args.checkmark}"`);\n  if (args.iconcolor) attrs.push(`iconcolor="${args.iconcolor}"`);\n  return `<labs-button ${attrs.join(\' \')}></labs-button>`;\n}',...i.parameters?.docs?.source}}};s.parameters={...s.parameters,docs:{...s.parameters?.docs,source:{originalSource:'args => {\n  // If preset is selected, use that configuration\n  if (args.preset && buttonConfigs[args.preset]) {\n    const config = buttonConfigs[args.preset];\n    const attrs = [];\n    if (config.label) attrs.push(`label="${config.label}"`);\n    if (config.variant && config.variant !== \'primary\') attrs.push(`variant="${config.variant}"`);\n    if (config.icon) attrs.push(`icon="${config.icon}"`);\n    if (config.iconRight) attrs.push(`icon-right="${config.iconRight}"`);\n    if (config.checkmark) attrs.push(`checkmark="${config.checkmark}"`);\n    if (config.iconcolor) attrs.push(`iconcolor="${config.iconcolor}"`);\n    return `<labs-button ${attrs.join(\' \')}></labs-button>`;\n  }\n\n  // Otherwise use manual args\n  const attrs = [];\n  if (args.label) attrs.push(`label="${args.label}"`);\n  if (args.variant && args.variant !== \'primary\') attrs.push(`variant="${args.variant}"`);\n  if (args.icon) attrs.push(`icon="${args.icon}"`);\n  if (args.iconRight) attrs.push(`icon-right="${args.iconRight}"`);\n  if (args.checkmark) attrs.push(`checkmark="${args.checkmark}"`);\n  if (args.iconcolor) attrs.push(`iconcolor="${args.iconcolor}"`);\n  return `<labs-button ${attrs.join(\' \')}></labs-button>`;\n}',...s.parameters?.docs?.source}}};c.parameters={...c.parameters,docs:{...c.parameters?.docs,source:{originalSource:'args => {\n  // If preset is selected, use that configuration\n  if (args.preset && buttonConfigs[args.preset]) {\n    const config = buttonConfigs[args.preset];\n    const attrs = [];\n    if (config.label) attrs.push(`label="${config.label}"`);\n    if (config.variant && config.variant !== \'primary\') attrs.push(`variant="${config.variant}"`);\n    if (config.icon) attrs.push(`icon="${config.icon}"`);\n    if (config.iconRight) attrs.push(`icon-right="${config.iconRight}"`);\n    if (config.checkmark) attrs.push(`checkmark="${config.checkmark}"`);\n    if (config.iconcolor) attrs.push(`iconcolor="${config.iconcolor}"`);\n    return `<labs-button ${attrs.join(\' \')}></labs-button>`;\n  }\n\n  // Otherwise use manual args\n  const attrs = [];\n  if (args.label) attrs.push(`label="${args.label}"`);\n  if (args.variant && args.variant !== \'primary\') attrs.push(`variant="${args.variant}"`);\n  if (args.icon) attrs.push(`icon="${args.icon}"`);\n  if (args.iconRight) attrs.push(`icon-right="${args.iconRight}"`);\n  if (args.checkmark) attrs.push(`checkmark="${args.checkmark}"`);\n  if (args.iconcolor) attrs.push(`iconcolor="${args.iconcolor}"`);\n  return `<labs-button ${attrs.join(\' \')}></labs-button>`;\n}',...c.parameters?.docs?.source}}};e.parameters={...e.parameters,docs:{...e.parameters?.docs,source:{originalSource:'args => {\n  // If preset is selected, use that configuration\n  if (args.preset && buttonConfigs[args.preset]) {\n    const config = buttonConfigs[args.preset];\n    const attrs = [];\n    if (config.label) attrs.push(`label="${config.label}"`);\n    if (config.variant && config.variant !== \'primary\') attrs.push(`variant="${config.variant}"`);\n    if (config.icon) attrs.push(`icon="${config.icon}"`);\n    if (config.iconRight) attrs.push(`icon-right="${config.iconRight}"`);\n    if (config.checkmark) attrs.push(`checkmark="${config.checkmark}"`);\n    if (config.iconcolor) attrs.push(`iconcolor="${config.iconcolor}"`);\n    return `<labs-button ${attrs.join(\' \')}></labs-button>`;\n  }\n\n  // Otherwise use manual args\n  const attrs = [];\n  if (args.label) attrs.push(`label="${args.label}"`);\n  if (args.variant && args.variant !== \'primary\') attrs.push(`variant="${args.variant}"`);\n  if (args.icon) attrs.push(`icon="${args.icon}"`);\n  if (args.iconRight) attrs.push(`icon-right="${args.iconRight}"`);\n  if (args.checkmark) attrs.push(`checkmark="${args.checkmark}"`);\n  if (args.iconcolor) attrs.push(`iconcolor="${args.iconcolor}"`);\n  return `<labs-button ${attrs.join(\' \')}></labs-button>`;\n}',...e.parameters?.docs?.source}}};g.parameters={...g.parameters,docs:{...g.parameters?.docs,source:{originalSource:'args => {\n  // If preset is selected, use that configuration\n  if (args.preset && buttonConfigs[args.preset]) {\n    const config = buttonConfigs[args.preset];\n    const attrs = [];\n    if (config.label) attrs.push(`label="${config.label}"`);\n    if (config.variant && config.variant !== \'primary\') attrs.push(`variant="${config.variant}"`);\n    if (config.icon) attrs.push(`icon="${config.icon}"`);\n    if (config.iconRight) attrs.push(`icon-right="${config.iconRight}"`);\n    if (config.checkmark) attrs.push(`checkmark="${config.checkmark}"`);\n    if (config.iconcolor) attrs.push(`iconcolor="${config.iconcolor}"`);\n    return `<labs-button ${attrs.join(\' \')}></labs-button>`;\n  }\n\n  // Otherwise use manual args\n  const attrs = [];\n  if (args.label) attrs.push(`label="${args.label}"`);\n  if (args.variant && args.variant !== \'primary\') attrs.push(`variant="${args.variant}"`);\n  if (args.icon) attrs.push(`icon="${args.icon}"`);\n  if (args.iconRight) attrs.push(`icon-right="${args.iconRight}"`);\n  if (args.checkmark) attrs.push(`checkmark="${args.checkmark}"`);\n  if (args.iconcolor) attrs.push(`iconcolor="${args.iconcolor}"`);\n  return `<labs-button ${attrs.join(\' \')}></labs-button>`;\n}',...g.parameters?.docs?.source}}};const d=["Default","AllVariants","WithIcons","IconOnly","ThemeToggle","DangerActions"];export{i as AllVariants,g as DangerActions,o as Default,c as IconOnly,e as ThemeToggle,s as WithIcons,d as __namedExportsOrder,m as default};
