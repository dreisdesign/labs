// Auto-generated icons list from SVG files in design-system/icons/
// This script scans the icons directory, updates the icons-list.js,
// and also updates the labs-icon.js component.
import fs from 'fs';
import path from 'path';

const iconsDir = path.resolve(process.cwd(), 'design-system/icons');
const iconsListPath = path.resolve(process.cwd(), 'design-system/src/components/icons-list.js');
const labsIconComponentPath = path.resolve(process.cwd(), 'design-system/src/components/labs-icon.js');
const iconFileSuffix = '--labs-icons.svg';

// 1. Read icon files and generate names
const files = fs.readdirSync(iconsDir);
const iconNames = files
    .filter(f => f.endsWith(iconFileSuffix))
    .map(f => f.replace(iconFileSuffix, ''))
    .sort(); // Sort alphabetically for consistency

if (iconNames.length === 0) {
    console.log('No icons found. Exiting.');
    process.exit(0);
}

// 2. Generate content for icons-list.js
const iconsListContent = `// Generated by scripts/generate-icons-list.mjs\nexport default ${JSON.stringify(iconNames, null, 4)};\n`;

// 3. Generate the 'icons' object for labs-icon.js
const iconsObjectContent = iconNames.map(name => `    ${name}: ICON_BASE + '${name}${iconFileSuffix}'`).join(',\n');
const fullIconsObject = `const icons = {\n${iconsObjectContent}\n};`;

// 4. Update labs-icon.js
try {
    let labsIconContent = fs.readFileSync(labsIconComponentPath, 'utf8');
    
    // Replace the old 'icons' object with the new one
    const regex = /const icons = \{[^\}]+\};/s;
    if (regex.test(labsIconContent)) {
        labsIconContent = labsIconContent.replace(regex, fullIconsObject);
        fs.writeFileSync(labsIconComponentPath, labsIconContent, 'utf8');
        console.log(`Updated ${labsIconComponentPath} with ${iconNames.length} icons.`);
    } else {
        console.error(`Could not find the 'icons' object in ${labsIconComponentPath}.`);
    }

} catch (error) {
    console.error(`Error updating ${labsIconComponentPath}:`, error);
}

// 5. Write to icons-list.js
try {
    fs.writeFileSync(iconsListPath, iconsListContent);
    console.log(`Updated ${iconsListPath} with ${iconNames.length} icons.`);
} catch (error) {
    console.error(`Error writing to ${iconsListPath}:`, error);
}

console.log('Icon generation complete.');