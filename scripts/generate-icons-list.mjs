// Auto-generated icons list from SVG files in design-system/icons/
// This script scans the icons directory, updates the icons-list.js,
// and also updates the labs-icon.js component.
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const repoRoot = path.resolve(__dirname, "..");
const iconsDir = path.resolve(repoRoot, "design-system/icons");
const iconsListPath = path.resolve(repoRoot, "design-system/src/components/icons-list.js");
const labsIconComponentPath = path.resolve(repoRoot, "design-system/src/components/labs-icon.js");
const iconFileSuffix = "--labs-icons.svg";

// 1. Read icon files and generate names
const files = fs.readdirSync(iconsDir);
const iconNames = files
  .filter((f) => f.endsWith(iconFileSuffix))
  .map((f) => f.replace(iconFileSuffix, ""))
  .sort(); // Sort alphabetically for consistency

if (iconNames.length === 0) {
  console.log("No icons found. Exiting.");
  process.exit(0);
}

// 2. Generate content for icons-list.js
const iconsListContent = `// Generated by scripts/generate-icons-list.mjs\nexport default ${JSON.stringify(iconNames, null, 4)};\n`;


// 3. Generate the 'icons' object for labs-icon.js (with comment markers)
const iconsObjectContent = iconNames
  .map((name) => `  "${name}": ICON_BASE + '${name}${iconFileSuffix}'`)
  .join(",\n");
const fullIconsBlock = `// ICONS-START (auto-generated by scripts/generate-icons-list.mjs)\nconst icons = {\n${iconsObjectContent}\n};\n// ICONS-END`;

// 4. Update labs-icon.js between ICONS-START and ICONS-END
try {
  let labsIconContent = fs.readFileSync(labsIconComponentPath, "utf8");
  const startMarker = /\/\/ ICONS-START[\s\S]*?const icons = \{/;
  const endMarker = /\};[\s\S]*?\/\/ ICONS-END/;
  const blockRegex = /\/\/ ICONS-START[\s\S]*?\/\/ ICONS-END/;

  if (blockRegex.test(labsIconContent)) {
    labsIconContent = labsIconContent.replace(blockRegex, fullIconsBlock);
    fs.writeFileSync(labsIconComponentPath, labsIconContent, "utf8");
    console.log(`Updated ${labsIconComponentPath} with ${iconNames.length} icons.`);
  } else {
    console.error(`Could not find ICONS-START/ICONS-END markers in ${labsIconComponentPath}.`);
  }
} catch (error) {
  console.error(`Error updating ${labsIconComponentPath}:`, error);
}

// 5. Write to icons-list.js
try {
  fs.writeFileSync(iconsListPath, iconsListContent);
  console.log(`Updated ${iconsListPath} with ${iconNames.length} icons.`);
} catch (error) {
  console.error(`Error writing to ${iconsListPath}:`, error);
}

console.log("Icon generation complete.");
